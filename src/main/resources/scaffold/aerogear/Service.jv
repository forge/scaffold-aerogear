package com.test.rest;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;

import javax.ejb.Stateful;
import javax.enterprise.context.RequestScoped;
import javax.inject.Inject;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.CriteriaQuery;
import javax.persistence.criteria.Predicate;
import javax.persistence.criteria.Root;
import javax.validation.ConstraintViolation;
import javax.validation.Validator;
import javax.ws.rs.Consumes;
import javax.ws.rs.DELETE;
import javax.ws.rs.GET;
import javax.ws.rs.POST;
import javax.ws.rs.PUT;
import javax.ws.rs.Path;
import javax.ws.rs.PathParam;
import javax.ws.rs.Produces;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;

import @{entity.getQualifiedName()}@{qbeMetawidgetImports};

/**
 * Service bean for @{entity.getName()} entities.
 * <p>
 * This class provides CRUD functionality for all @{entity.getName()} entities. It focuses
 * purely on Java EE 6 standards (e.g. <tt>&#64;ConversationScoped</tt> for
 * state management, <tt>PersistenceContext</tt> for persistence,
 * <tt>CriteriaBuilder</tt> for searches) rather than introducing a CRUD
 * framework or custom base class.
 */

@Path("/@{ccEntity}")
@Stateful
@RequestScoped
public class @{entity.getName()}Service {

	@PersistenceContext
	private EntityManager entityManager;

	@Inject
	private Validator validator;

	/*
	 * Support retrieving @{entity.getName()} entities
	 */

	@GET
	@Path("/{id:[0-9][0-9]*}")
	@Produces(MediaType.APPLICATION_JSON)
	public @{entity.getName()} retrieve(@PathParam("id") long id) {

		return this.entityManager.find(@{entity.getName()}.class, id);
	}

	/*
	 * Support creating, updating and deleting @{entity.getName()} entities
	 */

	@PUT
	@Consumes(MediaType.APPLICATION_JSON)
	@Produces(MediaType.APPLICATION_JSON)
	public Response create(@{entity.getName()} @{ccEntity}) {
		
		return update(null, @{ccEntity});
	}

	@PUT
	@Path("/{id:[0-9][0-9]*}")
	@Consumes(MediaType.APPLICATION_JSON)
	@Produces(MediaType.APPLICATION_JSON)
	public Response update(@PathParam("id") Long id, @{entity.getName()} @{ccEntity}) {

		@{ccEntity}.setId(id);
		
		// Validate

		Set<ConstraintViolation<@{entity.getName()}>> violations = this.validator.validate(@{ccEntity});

		if (!violations.isEmpty()) {

			Map<String, String> responseObj = new HashMap<String, String>();

			for (ConstraintViolation<?> violation : violations) {
				responseObj.put(violation.getPropertyPath().toString(), violation.getMessage());
			}

			return Response.status(Response.Status.PRECONDITION_FAILED).entity(responseObj).build();
		}

		// Save
		
		if (id == null) {
			this.entityManager.persist(@{ccEntity});
		} else {
			this.entityManager.merge(@{ccEntity});
		}
		return Response.ok().build();
	}

	@DELETE
	@Path("/{id:[0-9][0-9]*}")
	@Produces(MediaType.APPLICATION_JSON)
	public Response delete(@PathParam("id") long id) {

		this.entityManager.remove(retrieve(id));
		return Response.ok().build();
	}
	
	/*
	 * Support searching @{entity.getName()} entities
	 */
	 
	@POST
	@Path("/search")
	@Consumes(MediaType.APPLICATION_JSON)
	@Produces(MediaType.APPLICATION_JSON)
	public List<@{entity.getName()}> getPageItems(@{entity.getName()} search) {
		
		CriteriaBuilder builder = this.entityManager.getCriteriaBuilder();		
		CriteriaQuery<@{entity.getName()}> criteria = builder.createQuery(@{entity.getName()}.class);
		Root<@{entity.getName()}> root = criteria.from(@{entity.getName()}.class);
		criteria = criteria.select(root);
		
		if ( search != null ) {
			criteria = criteria.where(getSearchPredicates(root, search));
		}
		
		return this.entityManager.createQuery(criteria).getResultList();
	}

	private Predicate[] getSearchPredicates(Root<@{entity.getName()}> root, @{entity.getName()} search) {

		CriteriaBuilder builder = this.entityManager.getCriteriaBuilder();
		List<Predicate> predicatesList = new ArrayList<Predicate>();

		@{qbeMetawidget}

		return predicatesList.toArray(new Predicate[predicatesList.size()]);
	}

	/*
	 * Support listing and POSTing back @{entity.getName()} entities (e.g. from inside a
	 * &lt;select&gt;)
	 */

	@GET
	@Produces(MediaType.APPLICATION_JSON)
	public Map<Long,String> getAll() {
		
		Map<Long,String> all = new HashMap<Long,String>();
		
		for( @{entity.getName()} item : getPageItems( null )) {
			all.put(item.getId(), item.toString());
		}
		
		return all;
	}
}